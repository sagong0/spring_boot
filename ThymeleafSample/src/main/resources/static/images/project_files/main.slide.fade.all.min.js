(function($) {
	$.fn.slides = function(option) {
		option = $.extend({}, $.fn.slides.option, option);
		return this.each(function() {
			$("." + option.container, $(this)).children().wrapAll('<div class="slides_control"/>');
			var elem = $(this), 
			control = $(".slides_control", elem), 
			total = control.children().size(),
			width = control.children().outerWidth(), 
			height = control.children().outerHeight(), 
			start = option.start - 1, 
			effect = option.effect.indexOf(",") < 0 ? option.effect : option.effect.replace(" ", "").split(",")[0], 
			paginationEffect = option.effect.indexOf(",") < 0 ? effect : option.effect.replace(" ", "").split(",")[1], 
			next = 0, 
			prev = 0, 
			number = 0, 
			current = 0, 
			loaded, 
			active, 
			clicked, 
			position, 
			direction, 
			imageParent;
					
			function animate(direction, effect, clicked) {
				if (!active && loaded) {
					active = true;
					option.animationStart(current + 1);
					switch (direction) {
					case "next":
						prev = current;
						next = current + 1;
						next = total === next ? 0 : next;
						position = width * 2;
						direction = -width * 2;
						current = next;
						break;
					case "prev":
						prev = current;
						next = current - 1;
						next = next === -1 ? total - 1 : next;
						position = 0;
						direction = 0;
						current = next;
						break;
					case "pagination":
						next = parseInt(clicked, 10);
						prev = $("." + option.paginationClass + " li." + option.currentClass + " a", elem).attr("href").match("[^#/]+$");
						if (next > prev) {
							position = width * 2;
							direction = -width * 2
						} else {
							position = 0;
							direction = 0
						}
						current = next;
						break
					}
					
					if (effect === "fade") {
						control.children(":eq(" + next + ")", elem)
								.css({ 
									zIndex : 1 
								})
								.fadeIn(750, "swing", function() {
									control.children(":eq(" + prev + ")", elem)
											.css({
												display : "none",
												zIndex : 0
											});
									control.children(":eq(" + next + ")", elem)
											.css({
												zIndex : 0
											});
									option.animationComplete(next + 1);
									active = false
								})
					} else {
						control.children(":eq(" + next + ")").css({
							left : position,
							display : "block"
						});
						control.animate({
							left : direction
						}, 750, "swing", function() {
							control.css({
								left : -width
							});
							control.children(":eq(" + next + ")").css({
								left : width,
								zIndex : 5
							});
							control.children(":eq(" + prev + ")").css({
								left : width,
								display : "none",
								zIndex : 0
							});
							option.animationComplete(next + 1);
							active = false
						})
					}
					
					if (option.pagination) {
						$("." + option.paginationClass + " li." + option.currentClass, elem).removeClass(option.currentClass);
						$("." + option.paginationClass + " li:eq(" + next + ")", elem).addClass(option.currentClass)
					}
				}
			}
			
			function stop() {
				clearInterval(elem.data("interval"))
			}
			
			function pause() {
				if (option.pause) {
					clearTimeout(elem.data("pause"));
					clearInterval(elem.data("interval"));
					pauseTimeout = setTimeout(function() {
						clearTimeout(elem.data("pause"));
						playInterval = setInterval(function() {
							animate("next", effect)
						}, option.play);
						elem.data("interval", playInterval)
					}, option.pause);
					elem.data("pause", pauseTimeout)
				} else {
					stop()
				}
			}
			
			function run() {
				clearTimeout(elem.data("pause"));
				playInterval = setInterval(function() {
					animate("next", effect)
				}, option.play);
				elem.data("interval", playInterval)
			}
			
			if (start > total) {
				start = total - 1
			}
			
			if (option.start) {
				current = start
			}
			
			control.children().css({
				position : "absolute",
				top : 0,
				left : control.children().outerWidth(),
				zIndex : 0,
				display : "none"
			});
			
			control.css({
				position : "relative",
				width : (width * 3),
				height : height,
				left : -width
			});
			
			$("." + option.container, elem).css({
				display : "block"
			});
			control.children(":eq(" + start + ")").fadeIn(1,
					function() {
						loaded = true;
						option.slidesLoaded()
					});
			if (option.hoverPause && option.play) {
				control.on("mouseover", function() {
					stop()
				});
				control.bind("mouseleave", function() {
					run()
				});
				
			}
			if (option.generateNextPrev) {
				$("." + option.container, elem).after('<a href="#" title="이전" class="' + option.prev + '"><span class="blind">메인배너 이전</span></a>');
				$("." + option.prev, elem).after('<a href="#" title="다음" class="' + option.next + '"><span class="blind">메인배너 다음</span></a>')
			}
			
			$("." + option.next, elem).click(function(e) {
//				e.preventDefault();
//				if (option.play) {
//					pause()
//				}
				animate("next", effect)
			});
			
			$("." + option.prev, elem).click(function(e) {
//				e.preventDefault();	
//				if (option.play) {
//					pause()
//				}
				animate("prev", effect)
			});
			
			$("." + option.prev, elem).on("mouseover mouseleave", function(e) {
				if (e.type === "mouseover") stop();
				else if (e.type === "mouseleave") run();
			});
			
			$("." + option.next, elem).on("mouseover mouseleave", function(e) {
				if (e.type === "mouseover") stop();
				else if (e.type === "mouseleave") run();
			});
			
			// Slides 버튼들(이전, 다음, 페이지네이션)에 Focus 됐을 때
			$("#slides").on("focus", "a", function() {
				stop();
			});
			
			// Slides 버튼들에서 Focus out 됐을 때
			$("#slides").on("focusout", function() {
				run();
			});
			
			if (option.generatePagination) {
				elem.append("<ul class=" + option.paginationClass + "></ul>");
				control.children().each(function() {
					$("." + option.paginationClass,
							elem)
							.append(
									'<li><a href="#'
											+ number
											+ '"><span class="blind">'
											+ (number + 1)
											+ "</span></a></li>");
					number++
				})
			}
			
			$("." + option.paginationClass + " li:eq(" + start + ")", elem).addClass(option.currentClass);
			$("." + option.paginationClass + " li a", elem).click(function() {
//				if (option.play) {
//					pause()
//				}
				clicked = $(this).attr("href").match("[^#/]+$");
				if (current != clicked) {
					animate("pagination", paginationEffect, clicked)
				}
				return false
			});
			
			if (option.play) {
				playInterval = setInterval(function() { animate("next", effect) }, option.play);
				elem.data("interval", playInterval)
			}
		})
	};
	
	$.fn.slides.option = {
		container : "slides_container",
		generateNextPrev : false,
		next : "next",
		prev : "prev",
		pagination : true,
		generatePagination : true,
		paginationClass : "pagination",
		currentClass : "current",
		start : 1,
		play : 0,
		pause : 0,
		hoverPause : false,
		animationStart : function() { },
		animationComplete : function() { },
		slidesLoaded : function() { }
	}
})(jQuery);